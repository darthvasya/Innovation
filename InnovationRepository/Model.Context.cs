//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InnovationRepository
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<appArea> appAreas { get; set; }
        public virtual DbSet<balanceInf> balanceInfs { get; set; }
        public virtual DbSet<Branch> Branches { get; set; }
        public virtual DbSet<causeOf> causeOfs { get; set; }
        public virtual DbSet<chaMeetNeedsOf> chaMeetNeedsOfs { get; set; }
        public virtual DbSet<Classification> Classifications { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<CompanyState> CompanyStates { get; set; }
        public virtual DbSet<contact> contacts { get; set; }
        public virtual DbSet<continuity> continuities { get; set; }
        public virtual DbSet<degreeNovelMark> degreeNovelMarks { get; set; }
        public virtual DbSet<degreeNovelPot> degreeNovelPots { get; set; }
        public virtual DbSet<district> districts { get; set; }
        public virtual DbSet<expMarShare> expMarShares { get; set; }
        public virtual DbSet<FieldActivity> FieldActivities { get; set; }
        public virtual DbSet<imactToEconomy> imactToEconomies { get; set; }
        public virtual DbSet<impactFactProd> impactFactProds { get; set; }
        public virtual DbSet<impactProdProc> impactProdProcs { get; set; }
        public virtual DbSet<IndividualOrEntry> IndividualOrEntries { get; set; }
        public virtual DbSet<Innovation> Innovations { get; set; }
        public virtual DbSet<innovationWorksheet> innovationWorksheets { get; set; }
        public virtual DbSet<License> Licenses { get; set; }
        public virtual DbSet<LicenseCompany> LicenseCompanies { get; set; }
        public virtual DbSet<Ownersheep> Ownersheep { get; set; }
        public virtual DbSet<PersonPost> PersonPosts { get; set; }
        public virtual DbSet<PersonStatu> PersonStatus { get; set; }
        public virtual DbSet<placeProdCycle> placeProdCycles { get; set; }
        public virtual DbSet<Prevelency> Prevelencies { get; set; }
        public virtual DbSet<realization> realizations { get; set; }
        public virtual DbSet<Sertification> Sertifications { get; set; }
        public virtual DbSet<StatesInnovation> StatesInnovations { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<town> towns { get; set; }
        public virtual DbSet<worksheet> worksheets { get; set; }
        public virtual DbSet<InformationAboutAuthor> InformationAboutAuthors { get; set; }
        public virtual DbSet<InformationAboutCompany> InformationAboutCompanies { get; set; }
        public virtual DbSet<InformationAboutRealization> InformationAboutRealizations { get; set; }
        public virtual DbSet<InformationAboutInnovation> InformationAboutInnovations { get; set; }
    
        public virtual ObjectResult<InnovationAfterDate_Result> InnovationAfterDate(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InnovationAfterDate_Result>("InnovationAfterDate", dateParameter);
        }
    
        public virtual ObjectResult<realizationInCompany_Result> realizationInCompany(Nullable<int> param)
        {
            var paramParameter = param.HasValue ?
                new ObjectParameter("param", param) :
                new ObjectParameter("param", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<realizationInCompany_Result>("realizationInCompany", paramParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
